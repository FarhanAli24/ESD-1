library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;


ENTITY testBench is
end entity testBench;



architecture test of testBench is



	component nios_system is
		port (
			clk_clk       : in  std_logic                    := 'X'; -- clk
			key1_export   : in  std_logic                    := 'X'; -- export
			leds_export   : out std_logic_vector(7 downto 0);        -- export
			reset_reset_n : in  std_logic                    := 'X'  -- reset_n
		);
	end component nios_system;


signal clk_sig            :std_logic := '0';
signal reset_sig         :std_logic := '0';






constant period     : time := 20ns;
SIGNAL sim_done 	       : boolean := false;
CONSTANT RESULTS_DELAY_c : integer := 4; -- depends on your design

begin


UUT: lab7 port map(
     
	clk_clk       => clk_sig,       --   clk.clk
	key1_export   => ,   --  key1.export
	leds_export   => ,   --  leds.export
	reset_reset_n => reset_sig -- reset.reset_n

);


-- Clk process
clk_sig <= NOT clk_sig AFTER PERIOD/2 WHEN (NOT sim_done) ELSE '0';


verification: process
begin
wait until clk_sig = '1';
WAIT UNTIL (clk_sig = '1');
-- reset process
reset_sig <= '1'; 


WAIT UNTIL (irq_sig = '1');

address_sig <='1';
write_enable_sig <= '1';

write_data_sig <= x"000124F8";--max 50k = 135 degrees
wait for 100ns;
write_enable_sig <= '0';
   

WAIT UNTIL (irq_sig = '1');

address_sig <='0';
write_enable_sig <= '1';
write_data_sig <= x"00015F90";--min 100k = 34 degrees
wait for 100ns;

wait until clk_sig = '1';
write_enable_sig <= '0';


-- Disable all signals 
WAIT UNTIL (clk_sig = '1');
WAIT FOR RESULTS_DELAY_c * PERIOD;
		
sim_done <= true;
		
-- Wait here forever
WAIT;

end process;





end architecture test;